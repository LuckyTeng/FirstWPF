<Window x:Class="DataBinding.ObjectValidation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:c="clr-namespace:DataBinding"
        Title="How to: Implement Validation Logic on Custom Objects" Height="300" Width="300">
    
    <Window.Resources>
        <c:Person x:Key="data"></c:Person>
        <Style x:Key="textBoxInError" TargetType="{x:Type TextBox}">
            <Setter Property="BorderBrush">
                <Setter.Value>
                    <SolidColorBrush Color="Red"></SolidColorBrush>
                </Setter.Value> 
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <TextBox Style="{StaticResource textBoxInError}" Margin="12,12,145,221">
            <TextBox.Text>
                <!--By setting ValidatesOnExceptions to True, it checks for exceptions
          that are thrown during the update of the source property.
          An alternative syntax is to add <ExceptionValidationRule/> within
          the <Binding.ValidationRules> section.-->
                <Binding Path="Age" Source="{StaticResource data}"
           
                         ValidatesOnDataErrors="True"
                   UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <!--DataErrorValidationRule checks for validation 
                      errors raised by the IDataErrorInfo object.-->
                        <!--Alternatively, you can set ValidationOnDataErrors="True" on the Binding.-->
                        <DataErrorValidationRule ValidatesOnTargetUpdated="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        <TextBox Height="27" HorizontalAlignment="Left" Margin="12,65,0,0" Name="textBox1" VerticalAlignment="Top" Width="120" />
    </Grid>
</Window>
